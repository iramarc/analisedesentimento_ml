Projeto de Análise de Sentimentos
Introdução
Este projeto utiliza um modelo de análise de sentimentos para classificar textos em categorias de sentimentos (POSITIVO, NEUTRAL, NEGATIVO). A aplicação é construída usando Flask e a biblioteca transformers da Hugging Face.

Pré-requisitos
Certifique-se de ter os seguintes softwares instalados:

Visual Studio Code (IDE)
Node.js(versão patch)
Python (versão patch)
Anaconda3 (Isso elimina potenciais problemas com a instalação de pacotes com dependências difíceis exemplo :PyTorch)
Cypress 
rustup-init.exe (O ecossistema Rust inclui bibliotecas robustas para várias finalidades, como web, cryptografia, inteligência artificial, entre outros.)

Instale as dependências do projeto:
          npm install cypress
          npm npm install
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install torch  # Instala PyTorch
          pip install pytest  # Instala pytest

Uso:
Para executar a aplicação, siga os passos abaixo:

Inicie o servidor Flask: python app.py

A aplicação estará disponível em http://0.0.0.0:5000.

Arquivos Principais:

app.py: Contém a lógica principal da aplicação Flask.
benchmark_quality.py: Similar ao app.py, utilizado para benchmarks de qualidade.
benchmark.py: Script para medir o tempo de resposta da API e verificar se está dentro do limite aceitável.
cypress.config.js: Configuração do Cypress para testes end-to-end.
index.html: Interface web para enviar textos e visualizar os resultados da análise de sentimentos.
package.json: Arquivo de configuração do Node.jscom as dependências de desenvolvimento.
requirements.txt: Lista de dependências Python necessárias para o projeto.
validation_data.json: Dados de validação para testar a precisão do modelo de análise de sentimentos.
sentiment_analysis.cy.js: Testes end-to-end para verificar a funcionalidade e desempenho da API de análise de sentimentos.

CI/CD com GitHub Actions
Este projeto utiliza GitHub Actions para automação de CI/CD. O pipeline é configurado para executar testes automatizados e deploy contínuo.

Resultados de Benchmarking
Os testes de benchmarking foram realizados para medir o desempenho da API e a qualidade das inferências.

Métricas de Desempenho: Enviar um texto válido para a API, medir o tempo de resposta e verificar se está dentro do limite aceitável (200ms). Motivo: Garantir que a API responde rapidamente a requisições válidas, proporcionando uma boa experiência ao usuário.

Tempo de resposta médio: 150ms
Taxa de sucesso: 98%

Avaliações de Qualidade de Inferência: Explicação do Código 

Geração de Dados Sintéticos:
A função generate_synthetic_data cria textos sintéticos com sentimentos positivos e negativos, tanto em inglês quanto em português. Isso ajuda a aumentar o conjunto de dados de validação.
Teste de Benchmark de Qualidade:
A função test_benchmark_quality combina os dados sintéticos com os dados de validação existentes e faz previsões usando a API.
As métricas de desempenho, como precisão, recall e F1 score, são calculadas usando a biblioteca classification_report do sklearn.
Critérios de Aceitação:
O código verifica se a precisão do modelo está acima de um limite mínimo aceitável (80%)

Precisão: 85.71%

Recall (Positivo): 93.33%
F1 Score (Positivo): 88.89%
Recall (Negativo): 83.12%
F1 Score (Negativo): 85.91%
Recall (Neutro): 70.59%
F1 Score (Neutro): 72.73%

Testes de Análise de Sentimentos Cypress: (sentiment_analysis.cy.js)

Teste 1: Verifica predição para texto válido em inglês
Ideia: Enviar um texto válido em inglês para a API e verificar se a predição está dentro dos valores esperados (POSITIVO, NEGATIVO, NEUTRAL) e se a confiança é um número maior que 0. Motivo: Garantir que a API está funcionando corretamente para textos em inglês e que a predição e a confiança retornadas são válidas.

Teste 2: Verifica predição para texto válido em português
Ideia: Enviar um texto válido em português para a API e verificar se a predição está dentro dos valores esperados (POSITIVO, NEGATIVO, NEUTRAL) e se a confiança é um número maior que 0. Motivo: Garantir que a API está funcionando corretamente para textos em português e que a predição e a confiança retornadas são válidas.

Teste 3: Valida comportamento para texto vazio
Ideia: Enviar um texto vazio para a API e verificar se a mensagem de erro retornada está correta. Motivo: Garantir que a API lida corretamente com entradas inválidas, como textos vazios, e retorna mensagens de erro apropriadas.

Teste 4: Valida comportamento para entrada numérica
Ideia: Enviar um texto contendo apenas números para a API e verificar se a mensagem de erro retornada está correta. Motivo: Garantir que a API lida corretamente com entradas inválidas, como textos contendo apenas números, e retorna mensagens de erro apropriadas.

Teste 5: Verifica processamento de texto com caracteres especiais
Ideia: Enviar um texto contendo caracteres especiais para a API e verificar se a predição está dentro dos valores esperados (POSITIVO, NEGATIVO, NEUTRAL) e se a confiança é um número maior que 0. Motivo: Garantir que a API pode processar textos contendo caracteres especiais e retornar predições válidas.

Teste 6: Valida funcionalidade de limpeza de campos na interface
Ideia: Inserir um texto no campo de entrada da interface web, clicar no botão "Limpar" e verificar se os campos de entrada e resultado foram limpos corretamente. Motivo: Garantir que a funcionalidade de limpeza de campos na interface web está funcionando corretamente.

Teste 7: Valida comportamento para texto contendo apenas caracteres especiais
Ideia: Enviar um texto contendo apenas caracteres especiais para a API e verificar se a mensagem de erro retornada está correta. Motivo: Garantir que a API lida corretamente com entradas inválidas, como textos contendo apenas caracteres especiais, e retorna mensagens de erro apropriadas.

Possíveis Aplicações do Projeto:

Monitoramento de Redes Sociais - Analisar sentimentos em postagens e comentários para entender a percepção do público sobre uma marca ou produto.

Atendimento ao Cliente - Avaliar o sentimento em interações de atendimento ao cliente para identificar problemas e melhorar a satisfação do cliente.

Análise de Feedback - Processar feedback de clientes e funcionários para identificar áreas de melhoria e tomar decisões informadas.

Pesquisa de Mercado - Analisar opiniões e sentimentos em pesquisas de mercado para entender as preferências e necessidades dos consumidores.